) %>%
arrange(samplePlate, sampleName) %>%
add_column(
peakResponse = .$peakAreaMetabolite/.$peakAreaSil,
index = c(1:nrow(.))
) %>%
select(index, samplePlate, sampleName, peakAreaMetabolite, peakAreaMetabolite, peakAreaSil, peakResponse) %>%
pivot_longer(data = .,
c("peakAreaMetabolite", "peakAreaSil", "peakResponse"),
names_to = "dataType",
values_to = "value"
) %>%
mutate(
samplePlate = gsub("a", "", samplePlate),
samplePlate = gsub("b", "", samplePlate),
sampleType = sampleName %>% gsub(".*p0", "", .) %>% sub("_", "-", .)%>% gsub(".*-", "", .) %>% gsub("_.*", "", .)
)
plateBoundaryIdx = NULL
for(idxPlate in unique(plotData$samplePlate)){
plateBoundaryIdx <- c(
plateBoundaryIdx,
plotData %>%
filter(samplePlate == idxPlate) %>%
.$index %>%
max()
)
}
plateBoundaryIdx <- plateBoundaryIdx[-length(plateBoundaryIdx)]
#make plot
plotList = list(
title = data.frame(x = 0.5, y = 0.5, label = idxPlot) %>%
ggplot(., aes(x = x, y = y, label = label)) +
geom_text(size = 6) +
theme_void() +  # removes axes and background
xlim(0, 1) + ylim(0, 1)  # optional: set limits to centre the text
)
idxData = unique(plotData$dataType)[2]
for(idxData in unique(plotData$dataType)){
loopPlotData = plotData %>%
filter(dataType == idxData)
#make plot
plotList[[idxData]] <- loopPlotData %>%
filter(sampleType != "SLTR") %>%
ggplot(
aes(
x=index,
y=value,
fill = sampleType,
shape = sampleType,
size=sampleType,
colour = sampleType
)
) +
geom_point() +
scale_fill_manual(values = c("LTR" = "#F8766D", "PQC" = "#7CAE00", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_colour_manual(values = c("LTR" = "black", "PQC" = "black", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_shape_manual(values = c("LTR" = 21, "PQC" = 21, "SLTR" = 4, "vLTR" = 4))+
scale_size_manual(values = c("LTR" = 4, "PQC" = 4, "SLTR" = 1.5, "vLTR" = 2)) +
ggtitle(idxData)+
theme_bw() +
geom_vline(xintercept = plateBoundaryIdx) +
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "PQC") %>% .$value %>% median(), linetype = "dashed", colour = "#7CAE00", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "LTR") %>% .$value %>% median(), linetype = "dashed", colour = "#F8766D", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "vLTR") %>% .$value %>% median(), linetype = "dashed", colour = "black", linewidth = 0.5)+
ylim(
c(mean(loopPlotData$value)- (sd(loopPlotData$value)*5),
mean(loopPlotData$value) + (sd(loopPlotData$value)*5)
)
)
}#idxData
cowplot::plot_grid(
plotlist = plotList,
ncol = 1 ,
rel_heights = c(0.1,1,1,1)
)
} #idxPlot
dev.off() #turn off pdf
} #if
dev.off()
print(
cowplot::plot_grid(
plotlist = plotList,
ncol = 1 ,
rel_heights = c(0.1,1,1,1)
)
)
if(functionListMethod == "CCC"){
#create dir.
if(!dir.exists(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots"))){
dir.create(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots"))
}
if(!dir.exists(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC"))){
dir.create(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC"))
}
#open PDF
pageWidth <- length(master_list$project_details$plateList)
#open pdf device
pdf(
onefile = TRUE, width = (15 + pageWidth), height = 10,
file = paste0(
master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC/", Sys.Date(), "_", master_list$project_details$project_name, "_SPE_", master_list$project_details$wash, "_CCC.pdf"
)
)
#make plot list
CCCplotList <- names(master_list$data$peakAreaMetabolite)
CCCplotList <- CCCplotList[!grepl("-SIL", CCCplotList)]
CCCplotList <- sort(CCCplotList)
idxPlot = CCCplotList[1]
for(idxPlot in CCCplotList){
message(paste0("printing CCC for ", idxPlot))
subPlotList <- names(master_list$data$peakAreaMetabolite)[grepl(idxPlot, names(master_list$data$peakAreaMetabolite), fixed = TRUE)]
plotData <- left_join(by = "sampleName",
master_list$data$peakAreaMetabolite[subPlotList[!grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)),
master_list$data$peakAreaMetabolite[subPlotList[grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)) %>%
select(sampleName, peakAreaMetabolite) %>%
rename(peakAreaSil = peakAreaMetabolite)
) %>%
arrange(samplePlate, sampleName) %>%
add_column(
peakResponse = .$peakAreaMetabolite/.$peakAreaSil,
index = c(1:nrow(.))
) %>%
select(index, samplePlate, sampleName, peakAreaMetabolite, peakAreaMetabolite, peakAreaSil, peakResponse) %>%
pivot_longer(data = .,
c("peakAreaMetabolite", "peakAreaSil", "peakResponse"),
names_to = "dataType",
values_to = "value"
) %>%
mutate(
samplePlate = gsub("a", "", samplePlate),
samplePlate = gsub("b", "", samplePlate),
sampleType = sampleName %>% gsub(".*p0", "", .) %>% sub("_", "-", .)%>% gsub(".*-", "", .) %>% gsub("_.*", "", .)
)
plateBoundaryIdx = NULL
for(idxPlate in unique(plotData$samplePlate)){
plateBoundaryIdx <- c(
plateBoundaryIdx,
plotData %>%
filter(samplePlate == idxPlate) %>%
.$index %>%
max()
)
}
plateBoundaryIdx <- plateBoundaryIdx[-length(plateBoundaryIdx)]
#make plot
plotList = list(
title = data.frame(x = 0.5, y = 0.5, label = idxPlot) %>%
ggplot(., aes(x = x, y = y, label = label)) +
geom_text(size = 6) +
theme_void() +  # removes axes and background
xlim(0, 1) + ylim(0, 1)  # optional: set limits to centre the text
)
idxData = unique(plotData$dataType)[2]
for(idxData in unique(plotData$dataType)){
loopPlotData = plotData %>%
filter(dataType == idxData)
#make plot
plotList[[idxData]] <- loopPlotData %>%
filter(sampleType != "SLTR") %>%
ggplot(
aes(
x=index,
y=value,
fill = sampleType,
shape = sampleType,
size=sampleType,
colour = sampleType
)
) +
geom_point() +
scale_fill_manual(values = c("LTR" = "#F8766D", "PQC" = "#7CAE00", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_colour_manual(values = c("LTR" = "black", "PQC" = "black", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_shape_manual(values = c("LTR" = 21, "PQC" = 21, "SLTR" = 4, "vLTR" = 4))+
scale_size_manual(values = c("LTR" = 4, "PQC" = 4, "SLTR" = 1.5, "vLTR" = 2)) +
ggtitle(idxData)+
theme_bw() +
geom_vline(xintercept = plateBoundaryIdx) +
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "PQC") %>% .$value %>% median(), linetype = "dashed", colour = "#7CAE00", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "LTR") %>% .$value %>% median(), linetype = "dashed", colour = "#F8766D", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "vLTR") %>% .$value %>% median(), linetype = "dashed", colour = "black", linewidth = 0.5)+
ylim(
c(mean(loopPlotData$value)- (sd(loopPlotData$value)*5),
mean(loopPlotData$value) + (sd(loopPlotData$value)*5)
)
)
}#idxData
print(
cowplot::plot_grid(
plotlist = plotList,
ncol = 1 ,
rel_heights = c(0.1,1,1,1)
)
)
} #idxPlot
dev.off() #turn off pdf
} #if
CCCplotList
idxPlot = CCCplotList[4]
message(paste0("printing CCC for ", idxPlot))
subPlotList <- names(master_list$data$peakAreaMetabolite)[grepl(idxPlot, names(master_list$data$peakAreaMetabolite), fixed = TRUE)]
subPlotList
plotData <- left_join(by = "sampleName",
master_list$data$peakAreaMetabolite[subPlotList[!grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)),
master_list$data$peakAreaMetabolite[subPlotList[grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)) %>%
select(sampleName, peakAreaMetabolite) %>%
rename(peakAreaSil = peakAreaMetabolite)
) %>%
arrange(samplePlate, sampleName) %>%
add_column(
peakResponse = .$peakAreaMetabolite/.$peakAreaSil,
index = c(1:nrow(.))
) %>%
select(index, samplePlate, sampleName, peakAreaMetabolite, peakAreaMetabolite, peakAreaSil, peakResponse) %>%
pivot_longer(data = .,
c("peakAreaMetabolite", "peakAreaSil", "peakResponse"),
names_to = "dataType",
values_to = "value"
) %>%
mutate(
samplePlate = gsub("a", "", samplePlate),
samplePlate = gsub("b", "", samplePlate),
sampleType = sampleName %>% gsub(".*p0", "", .) %>% sub("_", "-", .)%>% gsub(".*-", "", .) %>% gsub("_.*", "", .)
)
plotData
#set plate boundaries
plateBoundaryIdx = NULL
for(idxPlate in unique(plotData$samplePlate)){
plateBoundaryIdx <- c(
plateBoundaryIdx,
plotData %>%
filter(samplePlate == idxPlate) %>%
.$index %>%
max()
)
}
plateBoundaryIdx <- plateBoundaryIdx[-length(plateBoundaryIdx)]
plotList = list(
title = data.frame(x = 0.5, y = 0.5, label = idxPlot) %>%
ggplot(., aes(x = x, y = y, label = label)) +
geom_text(size = 6) +
theme_void() +  # removes axes and background
xlim(0, 1) + ylim(0, 1)  # optional: set limits to centre the text
)
idxData = unique(plotData$dataType)[3]
loopPlotData = plotData %>%
filter(dataType == idxData)
loopPlotData
median(loopPlotData$value)
sd(loopPlotData$value)
sort(loopPlotData$value)
IQR(IQR(loopPlotData$value))
IQR(loopPlotData$value)
#set custom y limits
ylimits = c(median(loopPlotData$value)- (IQR(loopPlotData$value)*5),
median(loopPlotData$value) + (IQR(loopPlotData$value)*5)
)
loopPlotData %>%
filter(sampleType != "SLTR") %>%
ggplot(
aes(
x=index,
y=value,
fill = sampleType,
shape = sampleType,
size=sampleType,
colour = sampleType
)
) +
geom_point() +
scale_fill_manual(values = c("LTR" = "#F8766D", "PQC" = "#7CAE00", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_colour_manual(values = c("LTR" = "black", "PQC" = "black", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_shape_manual(values = c("LTR" = 21, "PQC" = 21, "SLTR" = 4, "vLTR" = 4))+
scale_size_manual(values = c("LTR" = 4, "PQC" = 4, "SLTR" = 1.5, "vLTR" = 2)) +
ggtitle(idxData)+
theme_bw() +
geom_vline(xintercept = plateBoundaryIdx) +
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "PQC") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "#7CAE00", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "LTR") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "#F8766D", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "vLTR") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "black", linewidth = 0.5)+
ylim(ylimits)
if(functionListMethod == "CCC"){
#create dir.
if(!dir.exists(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots"))){
dir.create(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots"))
}
if(!dir.exists(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC"))){
dir.create(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC"))
}
#open PDF
pageWidth <- length(master_list$project_details$plateList)
#open pdf device
pdf(
onefile = TRUE, width = (15 + pageWidth), height = 10,
file = paste0(
master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC/", Sys.Date(), "_", master_list$project_details$project_name, "_SPE_", master_list$project_details$wash, "_CCC.pdf"
)
)
#make plot list
CCCplotList <- names(master_list$data$peakAreaMetabolite)
CCCplotList <- CCCplotList[!grepl("-SIL", CCCplotList)]
CCCplotList <- sort(CCCplotList)
idxPlot = CCCplotList[4]
for(idxPlot in CCCplotList){
message(paste0("printing CCC for ", idxPlot))
subPlotList <- names(master_list$data$peakAreaMetabolite)[grepl(idxPlot, names(master_list$data$peakAreaMetabolite), fixed = TRUE)]
plotData <- left_join(by = "sampleName",
master_list$data$peakAreaMetabolite[subPlotList[!grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)),
master_list$data$peakAreaMetabolite[subPlotList[grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)) %>%
select(sampleName, peakAreaMetabolite) %>%
rename(peakAreaSil = peakAreaMetabolite)
) %>%
arrange(samplePlate, sampleName) %>%
add_column(
peakResponse = .$peakAreaMetabolite/.$peakAreaSil,
index = c(1:nrow(.))
) %>%
select(index, samplePlate, sampleName, peakAreaMetabolite, peakAreaMetabolite, peakAreaSil, peakResponse) %>%
pivot_longer(data = .,
c("peakAreaMetabolite", "peakAreaSil", "peakResponse"),
names_to = "dataType",
values_to = "value"
) %>%
mutate(
samplePlate = gsub("a", "", samplePlate),
samplePlate = gsub("b", "", samplePlate),
sampleType = sampleName %>% gsub(".*p0", "", .) %>% sub("_", "-", .)%>% gsub(".*-", "", .) %>% gsub("_.*", "", .)
)
#set plate boundaries
plateBoundaryIdx = NULL
for(idxPlate in unique(plotData$samplePlate)){
plateBoundaryIdx <- c(
plateBoundaryIdx,
plotData %>%
filter(samplePlate == idxPlate) %>%
.$index %>%
max()
)
}
plateBoundaryIdx <- plateBoundaryIdx[-length(plateBoundaryIdx)]
#make plot
plotList = list(
title = data.frame(x = 0.5, y = 0.5, label = idxPlot) %>%
ggplot(., aes(x = x, y = y, label = label)) +
geom_text(size = 6) +
theme_void() +  # removes axes and background
xlim(0, 1) + ylim(0, 1)  # optional: set limits to centre the text
)
idxData = unique(plotData$dataType)[3]
for(idxData in unique(plotData$dataType)){
loopPlotData = plotData %>%
filter(dataType == idxData)
#set custom y limits
ylimits = c(median(loopPlotData$value)- (IQR(loopPlotData$value)*5),
median(loopPlotData$value) + (IQR(loopPlotData$value)*5)
)
#make plot
plotList[[idxData]] <- loopPlotData %>%
filter(sampleType != "SLTR") %>%
ggplot(
aes(
x=index,
y=value,
fill = sampleType,
shape = sampleType,
size=sampleType,
colour = sampleType
)
) +
geom_point() +
scale_fill_manual(values = c("LTR" = "#F8766D", "PQC" = "#7CAE00", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_colour_manual(values = c("LTR" = "black", "PQC" = "black", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_shape_manual(values = c("LTR" = 21, "PQC" = 21, "SLTR" = 4, "vLTR" = 4))+
scale_size_manual(values = c("LTR" = 4, "PQC" = 4, "SLTR" = 1.5, "vLTR" = 2)) +
ggtitle(idxData)+
theme_bw() +
geom_vline(xintercept = plateBoundaryIdx) +
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "PQC") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "#7CAE00", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "LTR") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "#F8766D", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "vLTR") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "black", linewidth = 0.5)+
ylim(ylimits)
}#idxData
print(
cowplot::plot_grid(
plotlist = plotList,
ncol = 1 ,
rel_heights = c(0.1,1,1,1)
)
)
} #idxPlot
dev.off() #turn off pdf
} #if
dev.off()
dev.off()
if(functionListMethod == "CCC"){
#create dir.
if(!dir.exists(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots"))){
dir.create(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots"))
}
if(!dir.exists(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC"))){
dir.create(paste0(master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC"))
}
#open PDF
pageWidth <- length(master_list$project_details$plateList)
#open pdf device
pdf(
onefile = TRUE, width = (15 + pageWidth), height = 10,
file = paste0(
master_list$project_details$project_dir, "/", master_list$project_details$wash, "/plots/CCC/", Sys.Date(), "_", master_list$project_details$project_name, "_SPE_", master_list$project_details$wash, "_CCC.pdf"
)
)
#make plot list
CCCplotList <- names(master_list$data$peakAreaMetabolite)
CCCplotList <- CCCplotList[!grepl("-SIL", CCCplotList)]
CCCplotList <- sort(CCCplotList)
idxPlot = CCCplotList[4]
for(idxPlot in CCCplotList){
message(paste0("printing CCC for ", idxPlot))
subPlotList <- names(master_list$data$peakAreaMetabolite)[grepl(idxPlot, names(master_list$data$peakAreaMetabolite), fixed = TRUE)]
plotData <- left_join(by = "sampleName",
master_list$data$peakAreaMetabolite[subPlotList[!grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)),
master_list$data$peakAreaMetabolite[subPlotList[grepl("SIL", subPlotList)]][[1]] %>%
filter(!grepl("check", sampleName, ignore.case = TRUE)) %>%
select(sampleName, peakAreaMetabolite) %>%
rename(peakAreaSil = peakAreaMetabolite)
) %>%
arrange(samplePlate, sampleName) %>%
add_column(
peakResponse = .$peakAreaMetabolite/.$peakAreaSil,
index = c(1:nrow(.))
) %>%
select(index, samplePlate, sampleName, peakAreaMetabolite, peakAreaMetabolite, peakAreaSil, peakResponse) %>%
pivot_longer(data = .,
c("peakAreaMetabolite", "peakAreaSil", "peakResponse"),
names_to = "dataType",
values_to = "value"
) %>%
mutate(
samplePlate = gsub("a", "", samplePlate),
samplePlate = gsub("b", "", samplePlate),
sampleType = sampleName %>% gsub(".*p0", "", .) %>% sub("_", "-", .)%>% gsub(".*-", "", .) %>% gsub("_.*", "", .)
)
#set plate boundaries
plateBoundaryIdx = NULL
for(idxPlate in unique(plotData$samplePlate)){
plateBoundaryIdx <- c(
plateBoundaryIdx,
plotData %>%
filter(samplePlate == idxPlate) %>%
.$index %>%
max()
)
}
plateBoundaryIdx <- plateBoundaryIdx[-length(plateBoundaryIdx)]
#make plot
plotList = list(
title = data.frame(x = 0.5, y = 0.5, label = idxPlot) %>%
ggplot(., aes(x = x, y = y, label = label)) +
geom_text(size = 6) +
theme_void() +  # removes axes and background
xlim(0, 1) + ylim(0, 1)  # optional: set limits to centre the text
)
idxData = unique(plotData$dataType)[3]
for(idxData in unique(plotData$dataType)){
loopPlotData = plotData %>%
filter(dataType == idxData)
#set custom y limits
ylimits = c(median(loopPlotData$value, na.rm = TRUE)- (IQR(loopPlotData$value, na.rm = TRUE)*4),
median(loopPlotData$value, na.rm = TRUE) + (IQR(loopPlotData$value, na.rm = TRUE)*4)
)
#make plot
plotList[[idxData]] <- loopPlotData %>%
filter(sampleType != "SLTR") %>%
ggplot(
aes(
x=index,
y=value,
fill = sampleType,
shape = sampleType,
size=sampleType,
colour = sampleType
)
) +
geom_point() +
scale_fill_manual(values = c("LTR" = "#F8766D", "PQC" = "#7CAE00", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_colour_manual(values = c("LTR" = "black", "PQC" = "black", "SLTR" = "#00BFC4", "vLTR" = "black")) +
scale_shape_manual(values = c("LTR" = 21, "PQC" = 21, "SLTR" = 4, "vLTR" = 4))+
scale_size_manual(values = c("LTR" = 4, "PQC" = 4, "SLTR" = 1.5, "vLTR" = 2)) +
ggtitle(idxData)+
theme_bw() +
geom_vline(xintercept = plateBoundaryIdx) +
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "PQC") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "#7CAE00", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "LTR") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "#F8766D", linewidth = 1)+
geom_hline(yintercept = loopPlotData %>% filter(sampleType == "vLTR") %>% .$value %>% median(na.rm = TRUE), linetype = "dashed", colour = "black", linewidth = 0.5)+
ylim(ylimits)
}#idxData
print(
cowplot::plot_grid(
plotlist = plotList,
ncol = 1 ,
rel_heights = c(0.1,1,1,1)
)
)
} #idxPlot
dev.off() #turn off pdf
} #if
