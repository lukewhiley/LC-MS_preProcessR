.[[idx_metabolite]] %>%
rsd(.)
} else {NA},
combatRsd = if(idx_metabolite %in% (master_list$data$response$combat %>% bind_rows() %>% names())){
master_list$data$response$combat %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.)
} else {NA}
)
)
}
rsdOut
combatRsd
View(rsdOut)
master_list$data$peakArea$imputed %>% bind_rows()
master_list$data$peakArea$imputed %>% bind_rows() %>% .[[x5_hiaa]]
master_list$data$peakArea$imputed %>% bind_rows() %>% .[["x5_hiaa"]]
master_list$data$peakArea$imputed %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["x5_hiaa"]]
master_list$data$peakArea$imputed %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["x5_hiaa_sil_d5"]]
rsd(master_list$data$peakArea$imputed %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["x5_hiaa_sil_d5"]])
rsd(master_list$data$peakArea$imputed %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["x5_hiaa"]])
View(rsdOut %>% filter(grepl("_sil", newNames)))
plot(master_list$data$peakArea$imputed %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["xa_sil_d4"]])
# combat takes into account all features in the algorithm. Because internal standards and samples are added at different stages their batch correction needs may differ. I have factored this into the next steps
master_list$data$peakArea$combat <- list()
# for SIL
dataImputed <- master_list$data$peakArea$imputed %>%
bind_rows() #%>%
select(
contains("sample"),
contains("_sil", ignore.case = TRUE)
)
master_list$data$peakArea$combat <- list()
# for SIL
dataImputed <- master_list$data$peakArea$imputed %>%
bind_rows() #%>%
select(
contains("sample"),
contains("_sil", ignore.case = TRUE)
)
master_list$data$peakArea$combat <- list()
master_list$data$peakArea$combat <- list()
# for SIL
dataImputed <- master_list$data$peakArea$imputed %>%
bind_rows() %>%
select(
contains("sample"),
contains("_sil", ignore.case = TRUE)
)
dataPreCombat <- dataImputed %>%
select(sample_id, !contains("sample")) %>%
#offset by constant factor of 1 for lof step later
mutate(
across(where(is.numeric), ~ .x+1)
) %>%
column_to_rownames("sample_id") %>%
t() %>%
log10()
#extract batch
batch = dataImputed %>%
.$sample_plate
#perform batch correction
dataPostCombat <- sva::ComBat(
dat = as.matrix(dataPreCombat),
batch = batch,
mod = NULL,           # or NULL
par.prior = TRUE,
prior.plots = FALSE,
mean.only = FALSE          # set TRUE if you only want mean-shift correction
#ref.batch = 1
)
# sometimes combat gives neg values, offset factor constant to remove this option
for(idx_metaboliteRow in 1:nrow(dataPostCombat)){
minRow = min(dataPostCombat[idx_metaboliteRow,], na.rm = TRUE)
if(minRow < 0){
dataPostCombat[idx_metaboliteRow, ] <- dataPostCombat[idx_metaboliteRow, ] + abs(minRow*2)
}
}
# unlog data
dataPostCombat2 <- left_join(
by = "sample_id",
dataImputed %>% select(contains("sample")),
((10^dataPostCombat) - 1) %>% # per-feature log nd offset removal
round(3) %>%
t(.) %>%
as.data.frame() %>%
lgw_impute() %>%
rownames_to_column("sample_id") %>%
as_tibble()
)
# repeat for non Sil data
# for SIL
dataImputed <- master_list$data$peakArea$imputed %>%
bind_rows() %>%
select(
contains("sample"),
!contains("_sil", ignore.case = TRUE)
)
dataPreCombat <- dataImputed %>%
select(sample_id, !contains("sample")) %>%
#offset by constant factor of 1 for lof step later
mutate(
across(where(is.numeric), ~ .x+1)
) %>%
column_to_rownames("sample_id") %>%
t() %>%
log10()
#extract batch
batch = dataImputed %>%
.$sample_plate
#perform batch correction
dataPostCombat <- sva::ComBat(
dat = as.matrix(dataPreCombat),
batch = batch,
mod = NULL,           # or NULL
par.prior = TRUE,
prior.plots = FALSE,
mean.only = FALSE          # set TRUE if you only want mean-shift correction
#ref.batch = 1
)
# sometimes combat gives neg values, offset factor constant to remove this option
for(idx_metaboliteRow in 1:nrow(dataPostCombat)){
minRow = min(dataPostCombat[idx_metaboliteRow,], na.rm = TRUE)
if(minRow < 0){
dataPostCombat[idx_metaboliteRow, ] <- dataPostCombat[idx_metaboliteRow, ] + abs(minRow*2)
}
}
# unlog data
dataPostCombat2 <- dataPostCombat2 %>%
left_join(
by = "sample_id",
.,
((10^dataPostCombat) - 1) %>% # per-feature log nd offset removal
round(3) %>%
t(.) %>%
as.data.frame() %>%
lgw_impute() %>%
rownames_to_column("sample_id") %>%
as_tibble()
) %>%
select(
master_list$data$peakArea$imputed %>%
bind_rows() %>%
names()
)
for(idx_plate in master_list$data$response$impute %>% names()){
master_list$data$peakArea$combat[[idx_plate]] <- dataPostCombat2 %>%
filter(sample_plate == idx_plate)
}
#set up objects lists for data storage
master_list$data$response <- list(
impute = list()#,
#combat = list()
)
#first calculate response for matched internal standards
silList <- master_list$data$peakArea$imputed %>%
bind_rows() %>%
select(contains("_sil")) %>%
names()
for(idx_plate in names(master_list$data$peakArea$impute)){
master_list$data$response$impute[[idx_plate]] <- master_list$data$peakArea$impute[[idx_plate]] %>%
select(contains("sample"))
#change data source
master_list$data$response$impute[[idx_plate]]$sample_data_source <- "imputeResponse"
#set loop data
loopData <- master_list$data$peakArea$impute[[idx_plate]]
idx_sil = silList[1]
for(idx_sil in silList){
loopSilData <- loopData[[idx_sil]]
#find target
loopTarget <- gsub("_sil.*", "", idx_sil)
if(length(which(names(loopData) == loopTarget)) == 1){
#store SIL used
master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$newNames == loopTarget)] <- idx_sil
#get metabolte target data
loopTargetData <- loopData[[loopTarget]]
#create response
loopResponse <- tibble(
loopResponse = loopTargetData/loopSilData
) %>% rename_with(~loopTarget)
#store data
master_list$data$response$impute[[idx_plate]] <- master_list$data$response$impute[[idx_plate]] %>%
bind_cols(
loopResponse
)
} #if
} #idx_sil
} #idx_plate
# repeat for combat data
# for(idx_plate in names(master_list$data$peakArea$combat)){
#
#   master_list$data$response$combat[[idx_plate]] <- master_list$data$peakArea$combat[[idx_plate]] %>%
#     select(contains("sample"))
#
#   #change data source
#   master_list$data$response$combat[[idx_plate]]$sample_data_source <- "combatResponse"
#
#   #set loop data
#   loopData <- master_list$data$peakArea$combat[[idx_plate]]
#
#   idx_sil = silList[1]
#   for(idx_sil in silList){
#
#   loopSilData <- loopData[[idx_sil]]
#   #find target
#   loopTarget <- gsub("_sil.*", "", idx_sil)
#
#   if(length(which(names(loopData) == loopTarget)) == 1){
#
#     #store SIL used
#     master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$newNames == loopTarget)] <- idx_sil
#     #get metabolte target data
#     loopTargetData <- loopData[[loopTarget]]
#
#     #create response
#     loopResponse <- tibble(
#       loopResponse = loopTargetData/loopSilData
#     ) %>% rename_with(~loopTarget)
#
#
#     #store data
#     master_list$data$response$combat[[idx_plate]] <- master_list$data$response$combat[[idx_plate]] %>%
#       bind_cols(
#         loopResponse
#       )
#
#   } # if
#   } #idx_sil
#}#idx_plate
#get list of metabolites
metaboliteList <- master_list$data$peakArea$imputed %>%
bind_rows() %>%
select(!names(master_list$data$response$impute[[1]])) %>%
select(!contains("_sil")) %>%
names()
#set loop data
loopData <- master_list$data$peakArea$impute %>% bind_rows()
loopDataQC <- loopData %>% filter(sample_type == "pqc")
#find best surrogate based on PQC rsd
idx_metabolite = metaboliteList[1]
for(idx_metabolite in metaboliteList){
#get experiment
metaboliteExperiment <- master_list$templates$metaboliteNames$experiment[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)]
#get polarity
metabolitePolarity <- master_list$templates$metaboliteNames$polarity[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)]
#getRT
metaboliteRT <- master_list$templates$metaboliteNames$rt[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)]
#get loop qc data per metabolite
loopMetaboliteData <- loopDataQC[[idx_metabolite]]
#loop through sil using a while loop
rsdOut <- NULL #for testing while loop
minRSD <- 100 #for testing while loop
rtBracket = 1.5 #for testing while loop
while (is.null(rsdOut) & minRSD > 30 & rtBracket < 5.1){
#nrow(as_tibble(rsdOut)) != length(silList)) {
idx_sil = silList[1]
for(idx_sil in (silList)){
#get experiment
silExperiment <- master_list$templates$metaboliteNames$experiment[which(master_list$templates$metaboliteNames$newNames == idx_sil)]
#get polarity
silPolarity <- master_list$templates$metaboliteNames$polarity[which(master_list$templates$metaboliteNames$newNames == idx_sil)]
#getRT
silRT <- master_list$templates$metaboliteNames$rt[which(master_list$templates$metaboliteNames$newNames == idx_sil)]
if(metaboliteExperiment == silExperiment & metabolitePolarity == silPolarity & silRT > (metaboliteRT - rtBracket) & silRT < (metaboliteRT + rtBracket)){
#print(idx_sil)
loopSilData <- loopDataQC[[idx_sil]]
loopResponse <- loopMetaboliteData/loopSilData
loopRSD <- ((sd(loopResponse, na.rm = TRUE)*100)/mean(loopResponse, na.rm = TRUE)) %>% round(2)
rsdOut <- rbind(rsdOut,
(c(idx_sil, loopRSD))
)
}
}
#if not matching sil then reduce requirement for experiment match
if(is.null(rsdOut) == TRUE){
for(idx_sil in (silList)){
#get polarity
silPolarity <- master_list$templates$metaboliteNames$polarity[which(master_list$templates$metaboliteNames$newNames == idx_sil)]
#getRT
silRT <- master_list$templates$metaboliteNames$rt[which(master_list$templates$metaboliteNames$newNames == idx_sil)]
if(metabolitePolarity == silPolarity & silRT > (metaboliteRT - rtBracket) & silRT < (metaboliteRT + rtBracket)){
#print(idx_sil)
loopSilData <- loopDataQC[[idx_sil]]
loopResponse <- loopMetaboliteData/loopSilData
loopRSD <- ((sd(loopResponse, na.rm = TRUE)*100)/mean(loopResponse, na.rm = TRUE)) %>% round(1)
rsdOut <- rbind(rsdOut,
(c(idx_sil, loopRSD))
)
}
}
}
#save target SIL
if(nrow(rsdOut %>% as_tibble) > 0){minRSD <- rsdOut %>% as_tibble() %>% .$V2 %>% as.numeric() %>% min(na.rm = TRUE)}
rtBracket <- rtBracket + 0.5
}#while
if(!is.null(rsdOut)){
#record sil choice and rsd
sil_choice <- (rsdOut %>% as_tibble() %>% mutate(V2 = as.numeric(V2)) %>% arrange(V2) %>% .$V1)[1]
#rsd_value <- (rsdOut %>% as_tibble() %>% mutate(V2 = as.numeric(V2)) %>% arrange(V2) %>% .$V2)[1]
#create response for imputed data
for(idx_plate in names(master_list$data$response$impute)){
master_list$data$response$impute[[idx_plate]] <- master_list$data$response$impute[[idx_plate]] %>%
add_column(
new_metabolite = master_list$data$peakArea$impute[[idx_plate]][[idx_metabolite]]/master_list$data$peakArea$impute[[idx_plate]][[sil_choice]]
) %>%
rename_with(~idx_metabolite, "new_metabolite")
}
#add sil_choice to template
master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)] <- sil_choice
} #!is.null
}
#make column tidy
for(idx_sil in master_list$templates$metaboliteNames$silUsed[which(!is.na(master_list$templates$metaboliteNames$silUsed))] %>% unique()){
tidyName = master_list$templates$metaboliteNames$tidyName[which(master_list$templates$metaboliteNames$newNames == idx_sil)]
if(length(tidyName)==1){
#replace with a consistent tidy name
master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$silUsed == idx_sil)] <- tidyName
}
}
#
dataImputed <- master_list$data$response$impute %>%
bind_rows()
#data prep (samples in cols and metabolites in rows)
dataPreCombat <- dataImputed %>%
select(sample_id, !contains("sample")) %>%
#offset by constant factor of 1 for lof step later
mutate(
across(where(is.numeric), ~ .x+1)
) %>%
column_to_rownames("sample_id") %>%
t() %>%
log10()
#extract batch
batch = dataImputed %>%
.$sample_plate
#perform batch correction
dataPostCombat <- sva::ComBat(
dat = as.matrix(dataPreCombat),
batch = batch,
mod = NULL,           # or NULL
par.prior = TRUE,
prior.plots = FALSE,
mean.only = FALSE          # set TRUE if you only want mean-shift correction
#ref.batch = 1
)
# sometimes combat gives neg values, offset factor constant to remove this option
for(idx_metaboliteRow in 1:nrow(dataPostCombat)){
minRow = min(dataPostCombat[idx_metaboliteRow,], na.rm = TRUE)
if(minRow < 0){
dataPostCombat[idx_metaboliteRow, ] <- dataPostCombat[idx_metaboliteRow, ] + abs(minRow*2)
} #if
} #for
#unlog data
dataPostCombat2 <- left_join(
by = "sample_id",
dataImputed %>% select(contains("sample")),
((10^dataPostCombat) - 1) %>% # per-feature log nd offset removal
round(3) %>%
t(.) %>%
as.data.frame() %>%
lgw_impute() %>%
rownames_to_column("sample_id") %>%
as_tibble()
)
#put into master_list
master_list$data$response[["combat"]] <- list()
for(idx_plate in names(master_list$data$response$impute)){
master_list$data$response$combat[[idx_plate]] <- dataPostCombat2 %>%
filter(sample_plate == idx_plate)
} #for
rsd <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
rsd <- (sd_x / mean_x) * 100
return(round(rsd, 1))
}
rsdOut <- list()
idx_metabolite = "x5_hiaa"
for(idx_metabolite in master_list$templates$metaboliteNames$newNames){
sil_used = master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)]
if(!is.na(sil_used)){
sil_used = master_list$templates$metaboliteNames$newNames[which(master_list$templates$metaboliteNames$tidyName == sil_used)]
}
rsdOut <- bind_rows(rsdOut,
tibble(
newNames = idx_metabolite,
peakAreaRsd = master_list$data$peakArea$imputed %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.),
silAreaRsd = if( idx_metabolite %in% (master_list$data$response$impute %>% bind_rows() %>% names()) ){
master_list$data$peakArea$impute %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[sil_used]] %>%
rsd(.)
},
combatRawRsd = master_list$data$peakArea$combat %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.),
responseRsd = if( idx_metabolite %in% (master_list$data$response$impute %>% bind_rows() %>% names()) ){
master_list$data$response$impute %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.)
} else {NA},
combatRsd = if(idx_metabolite %in% (master_list$data$response$combat %>% bind_rows() %>% names())){
master_list$data$response$combat %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.)
} else {NA}
)
)
}
View(rsdOut)
rsd <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
rsd <- (sd_x / mean_x) * 100
return(round(rsd, 1))
}
rsdOut <- list()
idx_metabolite = "x5_hiaa"
for(idx_metabolite in master_list$templates$metaboliteNames$newNames){
sil_used = master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)]
if(!is.na(sil_used)){
sil_used = master_list$templates$metaboliteNames$newNames[which(master_list$templates$metaboliteNames$tidyName == sil_used)]
}
rsdOut <- bind_rows(rsdOut,
tibble(
newNames = idx_metabolite,
peakAreaRsd = master_list$data$peakArea$imputed %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.),
combatRawRsd = master_list$data$peakArea$combat %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.)
silAreaRsd = if( idx_metabolite %in% (master_list$data$response$impute %>% bind_rows() %>% names()) ){
rsd <- function(x) {
if (!is.numeric(x)) stop("Input must be numeric")
mean_x <- mean(x, na.rm = TRUE)
sd_x <- sd(x, na.rm = TRUE)
rsd <- (sd_x / mean_x) * 100
return(round(rsd, 1))
}
rsdOut <- list()
idx_metabolite = "x5_hiaa"
for(idx_metabolite in master_list$templates$metaboliteNames$newNames){
sil_used = master_list$templates$metaboliteNames$silUsed[which(master_list$templates$metaboliteNames$newNames == idx_metabolite)]
if(!is.na(sil_used)){
sil_used = master_list$templates$metaboliteNames$newNames[which(master_list$templates$metaboliteNames$tidyName == sil_used)]
}
rsdOut <- bind_rows(rsdOut,
tibble(
newNames = idx_metabolite,
peakAreaRsd = master_list$data$peakArea$imputed %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.),
combatRawRsd = master_list$data$peakArea$combat %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.),
silAreaRsd = if( idx_metabolite %in% (master_list$data$response$impute %>% bind_rows() %>% names()) ){
master_list$data$peakArea$impute %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[sil_used]] %>%
rsd(.)
},
responseRsd = if( idx_metabolite %in% (master_list$data$response$impute %>% bind_rows() %>% names()) ){
master_list$data$response$impute %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.)
} else {NA},
combatRsd = if(idx_metabolite %in% (master_list$data$response$combat %>% bind_rows() %>% names())){
master_list$data$response$combat %>%
bind_rows() %>%
filter(sample_type == "pqc") %>%
.[[idx_metabolite]] %>%
rsd(.)
} else {NA}
)
)
}
View(rsdOut)
plot(master_list$data$peakArea$imputed %>% bind_rows() %>% .[["xa_sil_d4"]])
plot(master_list$data$peakArea$imputed %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["xa_sil_d4"]])
plot(master_list$data$peakArea$combat %>% bind_rows() %>% filter(sample_type == "pqc") %>% .[["xa_sil_d4"]])
View(rsdOut %>% filter(grepl("sil", newNames)))
library(statTarget)
browseVignettes("statTarget")
version("statTarget")
BiocManager::install("statTarget")
